# 콘서트 예약 application.yml - Redis 설정 추가
server:
  port: 8080

spring:
  application:
    name: hhplus
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

  # 📊 데이터베이스 설정 (.env에서 읽어옴)
  datasource:
    name: HangHaePlusDataSource
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 3
      connection-timeout: 10000
      max-lifetime: 60000

  # 🔴 Redis 설정 (대기열 시스템)
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # 🚀 Kafka 설정 (이벤트 기반 시스템)
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092,localhost:9093,localhost:9094}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all  # 모든 복제본에서 확인
      retries: 3  # 재시도 횟수
      properties:
        enable.idempotence: true  # 중복 방지
        max.in.flight.requests.per.connection: 5
        linger.ms: 5  # 배치 처리 대기 시간
        batch.size: 16384  # 배치 크기
        compression.type: snappy  # 압축 타입
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:concert-service}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest  # 가장 이른 오프셋부터 읽기
      enable-auto-commit: false  # 수동 커밋
      properties:
        spring.json.trusted.packages: "kr.hhplus.be.server"
        session.timeout.ms: 30000  # 세션 타임아웃
        heartbeat.interval.ms: 3000  # 하트비트 간격
        max.poll.records: 500  # 한 번에 가져올 최대 레코드 수
        fetch.min.bytes: 1  # 최소 fetch 크기
        fetch.max.wait.ms: 500  # 최대 대기 시간

  # 🛠️ JPA 설정
  jpa:
    open-in-view: false
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        timezone.default_storage: NORMALIZE_UTC
        jdbc.time_zone: UTC
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        use_sql_comments: true

# 📚 Swagger 설정
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    display-request-duration: true
    tags-sorter: alpha
    operations-sorter: method

# 🏥 Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,kafka
  endpoint:
    health:
      show-details: always

# 📝 로깅 설정
logging:
  level:
    kr.hhplus.be: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.kafka: INFO  # Kafka 로그 레벨
    org.apache.kafka: WARN  # Kafka 클라이언트 로그 레벨

# 📊 애플리케이션 정보
info:
  app:
    name: "콘서트 예약 서비스"
    description: "대기열 기반 콘서트 좌석 예약 시스템"
    version: "v1.0.0"
    environment: ${SPRING_PROFILES_ACTIVE:local}

# 🎫 대기열 시스템 설정
queue:
  max-active-users: 100  # 동시 활성 사용자 수
  token-expire-minutes: 30  # 토큰 만료 시간 (분)
  wait-time-per-user: 10  # 사용자당 대기 시간 (초)

# 🚀 Kafka 토픽 설정
kafka:
  topics:
    reservation-events: reservation-events
    payment-events: payment-events
    concert-events: concert-events
    user-events: user-events
    notification-events: notification-events
  consumer:
    groups:
      notification-service: notification-service
      analytics-service: analytics-service
      ranking-service: ranking-service
      data-platform: data-platform